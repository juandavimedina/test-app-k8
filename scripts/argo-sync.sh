#!/bin/bash

# Script para sincronizar aplicaciones de ArgoCD
# Uso: ./scripts/argo-sync.sh [test|staging|all]

set -e

ENVIRONMENT=${1:-all}

echo "üîÑ Sincronizando aplicaciones de ArgoCD..."

# Verificar que ArgoCD est√° instalado
if ! kubectl get namespace argocd &> /dev/null; then
    echo "‚ùå Namespace argocd no existe. Por favor instala ArgoCD primero."
    exit 1
fi

sync_application() {
    local app_name=$1
    
    echo "üîÑ Sincronizando aplicaci√≥n: $app_name"
    
    if kubectl get application $app_name -n argocd &> /dev/null; then
        # Forzar sincronizaci√≥n
        kubectl patch application $app_name -n argocd --type merge -p '{"operation":{"sync":{}}}'
        echo "‚úÖ Sincronizaci√≥n iniciada para $app_name"
        
        # Esperar a que se complete la sincronizaci√≥n
        echo "‚è≥ Esperando sincronizaci√≥n..."
        kubectl wait --for=condition=Synced application/$app_name -n argocd --timeout=300s || true
        
        # Verificar estado
        local sync_status=$(kubectl get application $app_name -n argocd -o jsonpath='{.status.sync.status}')
        local health_status=$(kubectl get application $app_name -n argocd -o jsonpath='{.status.health.status}')
        
        echo "üìä Estado de $app_name:"
        echo "  - Sync: $sync_status"
        echo "  - Health: $health_status"
    else
        echo "‚ùå Aplicaci√≥n $app_name no existe"
    fi
    echo ""
}

case $ENVIRONMENT in
    "test")
        sync_application "myapp-test"
        ;;
    "staging")
        sync_application "myapp-staging"
        ;;
    "all")
        sync_application "myapp-test"
        sync_application "myapp-staging"
        ;;
    *)
        echo "‚ùå Opci√≥n no v√°lida. Usa: test, staging o all"
        exit 1
        ;;
esac

echo "üéâ Sincronizaci√≥n completada!"
echo "üîç Para ver el estado: ./scripts/argo-status.sh"
